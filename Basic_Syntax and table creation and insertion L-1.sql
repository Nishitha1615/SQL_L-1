show databases;
use practice_db;

CREATE TABLE STAFF(
  STAFF_ID		VARCHAR(20),
 STAFF_TYPE	    VARCHAR(30),
 SCHOOL_ID		VARCHAR(20),
 FIRST_NAME	VARCHAR(100) NOT NULL,
 LAST_NAME		VARCHAR(25) NOT NULL,
 AGE			INT ,
 DOB			DATE,
 GENDER		VARCHAR(10) CHECK(GENDER IN('M','F','Female','Male')),
 JOIN_DATE	    DATE,
 ADDRESS_ID	  VARCHAR(15),
 CONSTRAINT PK_STF PRIMARY KEY(STAFF_ID),
 CONSTRAINT FK_STAFF_SCHL FOREIGN KEY(SCHOOL_ID) REFERENCES SCHOOL(SCHOOL_ID),
 CONSTRAINT FK_STAFF_ADDR FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID) ON DELETE CASCADE
);
DROP TABLE STAFF;

CREATE TABLE SCHOOL
(
    SCHOOL_ID         VARCHAR(20) PRIMARY KEY
  , SCHOOL_NAME       VARCHAR(100) NOT NULL
  , EDUCATION_BOARD   VARCHAR(80)
  , ADDRESS_ID        VARCHAR(20)
  , CONSTRAINT FK_SCHOOL_ADDR FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID) ON DELETE CASCADE
);

CREATE TABLE SUBJECTS
(
    SUBJECT_ID       VARCHAR(20) PRIMARY KEY
  , SUBJECT_NAME     VARCHAR(50) NOT NULL
);

CREATE TABLE STAFF_SALARY
(
    STAFF_ID         VARCHAR(20) PRIMARY KEY
  , SALARY           FLOAT
  , CURRENCY         VARCHAR(5)
);

CREATE TABLE CLASSES
(
    CLASS_ID         VARCHAR(20)
  , CLASS_NAME       VARCHAR(50) NOT NULL
  , SUBJECT_ID       VARCHAR(20)
  , TEACHER_ID       VARCHAR(20)
  , CONSTRAINT FK_STAFF_SUBJ FOREIGN KEY(SUBJECT_ID) REFERENCES SUBJECTS(SUBJECT_ID)
  , CONSTRAINT FK_STAFF_STFF FOREIGN KEY(TEACHER_ID) REFERENCES STAFF(STAFF_ID)
  , CONSTRAINT PK_CLASSES PRIMARY KEY (CLASS_ID, CLASS_NAME, SUBJECT_ID)
);

CREATE TABLE IF NOT EXISTS STUDENTS
(
    ID               VARCHAR(20) PRIMARY KEY
  , FIRST_NAME       VARCHAR(100) NOT NULL
  , LAST_NAME        VARCHAR(100) NOT NULL
  , GENDER           VARCHAR(10) CHECK (GENDER IN ('M', 'F', 'Male', 'Female'))
  , AGE              INT
  , DOB              DATE
  , GRADE            FLOAT
  , IS_ACTIVE        BOOLEAN
  , CONSTRAINT CH_STUDENTS_AGE CHECK (AGE > 0)
);

CREATE TABLE PARENTS
(
    ID               VARCHAR(20) PRIMARY KEY
  , FIRST_NAME       VARCHAR(100) NOT NULL
  , LAST_NAME        VARCHAR(100) NOT NULL
  , GENDER           VARCHAR(10)
  , ADDRESS_ID       VARCHAR(20)
  , CONSTRAINT CH_PARENTS CHECK (GENDER IN ('M', 'F', 'Male', 'Female'))
  , CONSTRAINT FK_PARENTS_ADDR FOREIGN KEY(ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
);

CREATE TABLE STUDENT_CLASSES
(
    STUDENT_ID       VARCHAR(20)
  , CLASS_ID         VARCHAR(20)
  , CONSTRAINT UNQ_STDCLASS UNIQUE (STUDENT_ID, CLASS_ID)
  , FOREIGN KEY(STUDENT_ID) REFERENCES STUDENTS(ID)
);

CREATE TABLE STUDENT_PARENT
(
    STUDENT_ID       VARCHAR(20)
  , PARENT_ID        VARCHAR(20)
  , CONSTRAINT UNQ_STDPARENT UNIQUE (STUDENT_ID, PARENT_ID)
  , FOREIGN KEY(STUDENT_ID) REFERENCES STUDENTS(ID)
  , FOREIGN KEY(PARENT_ID) REFERENCES PARENTS(ID)
);

DROP TABLE PARENTS;

DROP TABLE SCHOOL;

CREATE TABLE ADDRESS
(
    ADDRESS_ID       VARCHAR(20) PRIMARY KEY
  , STREET           VARCHAR(250)
  , CITY             VARCHAR(100)
  , STATE            VARCHAR(100)
  , COUNTRY          VARCHAR(100)
);

INSERT INTO ADDRESS VALUES
    ('ADR1001','44940 Bluestem Circle','Baton Rouge','Louisiana','United States'),
    ('ADR1002','029 Kropf Point','Richmond','Virginia','United States'),
    ('ADR1003','96 Jay Road','Dallas','Texas','United States'),
    ('ADR1004','15 Harbort Lane','Roanoke','Virginia','United States'),
    ('ADR1005','3 Vermont Plaza','Atlanta','Georgia','United States'),
    ('ADR1006','55 Sycamore Trail','Seattle','Washington','United States');

INSERT INTO SCHOOL (SCHOOL_ID, SCHOOL_NAME, EDUCATION_BOARD, ADDRESS_ID)
VALUES ('SCHL1001',  'NOBLE SCHOOL',  'CBSE',  'ADR1001');

INSERT INTO STAFF(STAFF_ID, STAFF_TYPE, SCHOOL_ID, FIRST_NAME, LAST_NAME, AGE, DOB, GENDER, JOIN_DATE, ADDRESS_ID) VALUES
('STF2004', 'Non-Teaching', 'SCHL1001', 'Shamala', 'Devi', '56', STR_TO_DATE('03/09/1964', '%d/%m/%Y'), 'F', STR_TO_DATE('05/06/2015', '%d/%m/%Y'), 'ADR1002'),
('STF1001', 'Manager', 'SCHL1001', 'Violet', 'Mascarenhas', '33', STR_TO_DATE('01/01/1987', '%d/%m/%Y'), 'F', STR_TO_DATE('02/03/2006', '%d/%m/%Y'), 'ADR1003'),
('STF1002', 'Dean', 'SCHL1001', 'Shaheen', 'Maryam', '55', STR_TO_DATE('02/02/1965', '%d/%m/%Y'), 'F', STR_TO_DATE('03/04/1984', '%d/%m/%Y'), 'ADR1004'),
('STF1003', 'Teaching', 'SCHL1001', 'Thelma', 'Silva', '56', STR_TO_DATE('03/03/1964', '%d/%m/%Y'), 'F', STR_TO_DATE('03/05/1983', '%d/%m/%Y'), 'ADR1005');


INSERT INTO STUDENTS VALUES
        ('STD10251','Minnaminnie','Cleft','Female',17,STR_TO_DATE('2012-02-23', '%Y-%m-%d'),8,true),
        ('STD10252','Effie','Emlyn','Female',18,STR_TO_DATE('2012-03-28', '%Y-%m-%d'),10,true),
        ('STD10253','Kerry','Aysik','Female',15,STR_TO_DATE('2012-01-09', '%Y-%m-%d'),7,false),
        ('STD10254','Jo','Mansfield','Male',16,STR_TO_DATE('2012-03-26', '%Y-%m-%d'),10,false),
        ('STD10255','Elianore','Macon','Female',12,STR_TO_DATE('2012-04-01', '%Y-%m-%d'),7,false),
        ('STD10256','Gregoire','Samwaye','Male',16,STR_TO_DATE('2012-04-27', '%Y-%m-%d'),6,true),
        ('STD10257','Raphael','Puncher','Male',10,STR_TO_DATE('2012-03-29', '%Y-%m-%d'),5,true);
        
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1001',  'Mathematics');
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1002',  'Science');
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1003',  'Social Studies');
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1004',  'English');
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1005',  'Arts');
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1006',  'Computer Application');
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1007',  'Music');
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1008',  'Reading');
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1009',  'Writing');
INSERT INTO SUBJECTS (SUBJECT_ID, SUBJECT_NAME) VALUES ('SUBJ1010',  'Psychology');

INSERT INTO STAFF_SALARY (STAFF_ID, SALARY, CURRENCY) VALUES
('STF2004','15000', 'USD'),
('STF1001','8000', 'USD'),
('STF1002','7000', 'USD'),
('STF1003','6000', 'USD'),
('STF1011','11000', 'USD'),
('STF1012','9000', 'USD'),
('STF1013','5000', 'USD'),
('STF1021','7000', 'USD'),
('STF1022','8000', 'USD'),
('STF1023','12000', 'USD');


INSERT INTO CLASSES (CLASS_ID, CLASS_NAME, SUBJECT_ID, TEACHER_ID) VALUES
('CLS1001', 'Grade 1', 'SUBJ1008', 'STF1001'),
('CLS1001', 'Grade 1', 'SUBJ1009', 'STF1001'),
('CLS1001', 'Grade 1', 'SUBJ1004', 'STF1002'),
('CLS1002', 'Grade 2', 'SUBJ1008', 'STF1001'),
('CLS1002', 'Grade 2', 'SUBJ1009', 'STF1001'),
('CLS1002', 'Grade 2', 'SUBJ1004', 'STF1002'),
('CLS1002', 'Grade 2', 'SUBJ1007', 'STF1003'),
('CLS1003', 'Grade 3', 'SUBJ1001', 'STF2004'),
('CLS1003', 'Grade 3', 'SUBJ1002', 'STF2004'),
('CLS1003', 'Grade 3', 'SUBJ1003', 'STF1002');

INSERT INTO PARENTS VALUES ('P00072','Jacinta','Bonnet','Female','ADR1001'),
            ('P00073','Chaddie','Rockingham','Male','ADR1002'),
            ('P00074','Kennie','Yoodall','Male','ADR1003'),
            ('P00075','Aland','Windrus','Male','ADR1004'),
            ('P00076','Haydon','Chaplyn','Male','ADR1005');
            
            INSERT INTO STUDENT_CLASSES VALUES
                ('STD10251','CLS1003'),
                ('STD10252','CLS1003'),
                ('STD10253','CLS1003'),
                ('STD10254','CLS1003'),
                ('STD10255','CLS1003'),
                ('STD10256','CLS1003'),
                ('STD10257','CLS1003');
                
                INSERT INTO STUDENT_PARENT VALUES
                    ('STD10251','P00072'),
                    ('STD10252','P00073'),
                    ('STD10253','P00074'),
                    ('STD10254','P00075'),
                    ('STD10255','P00076');



select * from SCHOOL;
select * from ADDRESS;
select * from STUDENTS;
select * from SUBJECTS;
select * from CLASSES;
select * from STAFF_SALARY;
select * from PARENTS;
select * from STUDENT_CLASSES;  -- P00072
select * from STUDENT_PARENT;

-- Other DDL Commands 
DROP TABLE STAFF;
DROP TABLE STAFF_NEW;
SELECT * FROM STAFF;
ALTER TABLE STAFF DROP COLUMN JOIN_DATE; -- Drop a column
ALTER TABLE STAFF MODIFY COLUMN AGE VARCHAR(15); -- Change The DataType of a column
DESCRIBE STAFF; -- Check The Type of a Column
ALTER TABLE STAFF RENAME TO STAFF_NEW; -- Rename The Table
ALTER TABLE STAFF RENAME COLUMN FIRST_NAME TO FULL_NAME; -- Rename The Column
ALTER TABLE STAFF ADD CONSTRAINT UNQ_STF UNIQUE(STAFF_TYPE);



-- DML Commands
SELECT * FROM ADDRESS;

UPDATE ADDRESS SET COUNTRY="USA" WHERE ADDRESS_ID="ADR1006"; 
UPDATE ADDRESS SET COUNTRY="INDIA",CITY="BANGALORE", STREET="7TH CROSS RTNAGAR" WHERE ADDRESS_ID="ADR1004"; -- Update MultiPle Columns at once
SET SQL_SAFE_UPDATES = 0;
DELETE FROM ADDRESS WHERE COUNTRY="USA";


/* Different SQL Operators:::   = ,<, >, >=, <=, <>, !=, BETWEEN, ORDER BY, IN, NOT IN, LIKE, ALIASE, DISTINCT, LIMIT, CASE:
Comparison Operators: =, <>, !=, >, <, >=, <=
Arithmetic Operators: +,-, *, /, %
Logical Operators: AND, OR, NOT, IN, BETWEEN, LIKE, etc..
*/


SELECT * FROM STUDENTS;  -- Fetch all columns and all records from table.
SELECT ID, FIRST_NAME FROM STUDENTS; -- Fetch only particular column.
SELECT * FROM SUBJECTS WHERE SUBJECT_NAME="MATHEMATICS";  -- Comparison Operators
SELECT * FROM SUBJECTS WHERE SUBJECT_NAME!="MATHEMATICS";  -- Not Equal to
SELECT * FROM STAFF_SALARY WHERE SALARY<=10000;
SELECT * FROM STAFF_SALARY ORDER BY SALARY;  -- Sort by ascending order using ORDER BY
SELECT * FROM STAFF_SALARY WHERE SALARY BETWEEN 5000 AND 10000 ORDER BY SALARY;
SELECT * FROM SUBJECTS WHERE SUBJECT_NAME IN ("MATHEMATICS","SCIENCE","ARTS");
SELECT * FROM SUBJECTS WHERE SUBJECT_NAME NOT IN ("MATHEMATICS","SCIENCE","ARTS");
SELECT * FROM SUBJECTS WHERE SUBJECT_NAME LIKE 'S%';  -- Starts with S
SELECT * FROM SUBJECTS WHERE SUBJECT_NAME LIKE '%C';  -- Ends with C
SELECT * FROM STAFF WHERE AGE > 50 AND GENDER ='F'; -- AND and OR operator
SELECT * FROM STAFF WHERE AGE < 50 OR GENDER ='M';
SELECT (5-2) AS TOTAL;  -- (OR) SELECT (5-2) AS TOTAL FROM DUAL;
SELECT STAFF_TYPE FROM STAFF;
SELECT DISTINCT STAFF_TYPE FROM STAFF;
SELECT STAFF_TYPE FROM STAFF LIMIT 3;  -- Select only first 3

-- CASE Statement
SELECT STAFF_ID, SALARY
, CASE WHEN SALARY >= 10000 THEN 'High Salary'
	   WHEN SALARY BETWEEN 5000 AND 10000 THEN 'Average Salary'
       WHEN SALARY < 5000 THEN 'Too Low'
 END AS RANGE_TYPE
 FROM STAFF_SALARY
 ORDER BY SALARY DESC ;
 
 -- Two Ways of Writing the Query
 -- fetch all the class name where Music is thought  as a subject
 
 SELECT CLASS_NAME 
 FROM SUBJECTS AS SUB
 JOIN CLASSES AS CLS ON SUB.SUBJECT_ID=CLS.SUBJECT_ID
 WHERE SUBJECT_NAME="Music";

-- Fetch the full name of all staff who teach Mathematics
SELECT DISTINCT (STF.FIRST_NAME||" "||STF.LAST_NAME) AS FULL_NAME
FROM SUBJECTS SUB
JOIN CLASSES CLS ON CLS.SUBJECT_ID=SUB.SUBJECT_ID
JOIN STAFF STF ON CLS.TEACHER_ID=STF.STAFF_ID
WHERE SUB.SUBJECT_NAME='Mathematics';

SELECT * FROM STUDENT_CLASSES;
-- Count np of syudents in each class
SELECT SC.CLASS_ID, COUNT(1) AS "no_of_students"
FROM STUDENT_CLASSES SC
GROUP BY SC.CLASS_ID
ORDER BY SC.CLASS_ID;

-- More then 5 students in each class
SELECT SC.CLASS_ID, COUNT(1) AS "no_of_students"
FROM STUDENT_CLASSES SC
GROUP BY SC.CLASS_ID
having COUNT(1)>5
ORDER BY SC.CLASS_ID;

SELECT * FROM STUDENT_PARENT;
-- Parents with more than 1 kid in school
SELECT PARENT_ID, COUNT(1) AS "no_of_kids"
FROM STUDENT_PARENT SP
GROUP BY SP.PARENT_ID
HAVING COUNT(1)>=1;

-- SUBQUERY: Query written inside a query.
-- Fetch the details of parents having more or equal to 1 kids

SELECT (P.FIRST_NAME||' ' ||P.LAST_NAME) AS PARENT_NAME
, (S.FIRST_NAME||' ' ||S.LAST_NAME) AS STUDENT_NAME
, S.AGE AS STUDENT_AGE
, S.GENDER AS STUDENT_GENDER
, (ADR. STREET||','||ADR.CITY||', '||ADR.STATE||','||ADR.COUNTRY)AS ADDRESS
FROM PARENTS P
JOIN STUDENT_PARENT SP ON P.ID=SP.PARENT_ID
JOIN STUDENTS S ON S.ID=SP.STUDENT_ID
JOIN ADDRESS ADR ON P.ADDRESS_ID=ADR.ADDRESS_ID
WHERE P.ID IN( SELECT PARENT_ID
			  FROM STUDENT_PARENT SP
			  GROUP BY SP.PARENT_ID
			  HAVING COUNT(1)>=1)
ORDER BY 1;

-- Aggregate Functions  (AVG, MIN,MAX,SUM, COUNT):
-- AVG
SELECT AVG(SS.SALARY) AS AVG_SALARY
FROM STAFF_SALARY SS
JOIN STAFF STF ON STF.STAFF_ID=SS.STAFF_ID
WHERE STF.STAFF_TYPE='NON-TEACHING';


-- SUM
SELECT STF.STAFF_TYPE, SUM(SS.SALARY) AS SUM_SALARY
FROM STAFF_SALARY SS
JOIN STAFF STF ON STF.STAFF_ID=SS.STAFF_ID
GROUP BY STF.STAFF_TYPE;

-- MIN
SELECT STF.STAFF_TYPE, MIN(SS.SALARY) AS SUM_SALARY
FROM STAFF_SALARY SS
JOIN STAFF STF ON STF.STAFF_ID=SS.STAFF_ID
GROUP BY STF.STAFF_TYPE;

-- MAX
SELECT STF.STAFF_TYPE, MAX(SS.SALARY) AS SUM_SALARY
FROM STAFF_SALARY SS
JOIN STAFF STF ON STF.STAFF_ID=SS.STAFF_ID
GROUP BY STF.STAFF_TYPE;

SELECT COUNT(1)
FROM  STAFF_SALARY SS
JOIN STAFF STF ON STF.STAFF_ID=SS.STAFF_ID
ORDER BY 1;

SELECT DISTINCT (STF.FIRST_NAME||' '||STF.LAST_NAME) AS FULL_NAME,SALARY
FROM STAFF STF
JOIN STAFF_SALARY SS ON SS.STAFF_ID=STF.STAFF_ID
ORDER BY 2;


-- LEFT JOIN
SELECT * FROM STAFF;
SELECT * FROM STAFF_SALARY;


SELECT COUNT(1)
FROM STAFF_SALARY SS
LEFT JOIN STAFF STF  ON SS.STAFF_ID= STF.STAFF_ID
ORDER BY 1;

-- SELECT COUNT(1)
-- FROM STAFF_SALARY SS
-- FULL OUTER JOIN STAFF STF  ON SS.STAFF_ID= STF.STAFF_ID
-- ORDER BY 1;

SELECT COUNT(1)
FROM STAFF_SALARY SS
LEFT JOIN STAFF STF ON SS.STAFF_ID = STF.STAFF_ID
UNION
SELECT COUNT(1)
FROM STAFF_SALARY SS
RIGHT JOIN STAFF STF ON SS.STAFF_ID = STF.STAFF_ID;


